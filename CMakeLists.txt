# -*- CMakeLists.txt generated by CodeLite IDE. Do not edit by hand -*-

cmake_minimum_required(VERSION 2.8.11)

# Workspace name
project(mbpoll)

# This setting is useful for providing JSON file used by CodeLite for code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

# Set default locations
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

set(CONFIGURATION_NAME "Release")

# Projects


# Top project
# Define some variables
set(PROJECT_PATH "${CMAKE_SOURCE_DIR}/")



#{{{{ User Code 1
# Place your code here
# Modifies binary file paths if codelite is not used.
if (NOT CL_USED)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
endif (NOT CL_USED)

# Appends the cmake/modules path to MAKE_MODULE_PATH variable.
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})

# search for the piduino package, if found, add the options ...
find_package(piduino QUIET)
if (piduino_FOUND)
  message (STATUS "PiDuino found !")
  link_directories(${PIDUINO_LIBRARY_DIRS})
  add_definitions(${PIDUINO_CFLAGS})
  if(PIDUINO_WITH_GPIO)
    add_definitions(-DMBPOLL_GPIO_RTS)
  endif(PIDUINO_WITH_GPIO)
  include_directories(BEFORE ${PIDUINO_INCLUDE_DIRS})
  list(APPEND LINK_OPTIONS ${PIDUINO_LIBRARIES})
  include (PiBoardInfo)
  if (NOT PIBOARD_ID)
    message (STATUS "Check the target platform, you can use PIBOARD_ID to force the target...")
    GetPiBoardInfo()
  endif (NOT PIBOARD_ID)
  set(PROGRAM_PERMISSIONS
    OWNER_WRITE OWNER_READ OWNER_EXECUTE
    GROUP_READ GROUP_EXECUTE
    WORLD_READ WORLD_EXECUTE
    SETUID)

else (piduino_FOUND)
  set(PROGRAM_PERMISSIONS
    OWNER_WRITE OWNER_READ OWNER_EXECUTE
    GROUP_READ GROUP_EXECUTE
    WORLD_READ WORLD_EXECUTE)
endif (piduino_FOUND)

include (GitVersion)
GetGitVersion(MBPOLL_VERSION)
WriteGitVersionFile(${CMAKE_CURRENT_BINARY_DIR}/version-git.h)
set(MBPOLL_VERSION
  ${MBPOLL_VERSION_MAJOR}.${MBPOLL_VERSION_MINOR}.${MBPOLL_VERSION_PATCH})
#target_include_directories(mbpoll PUBLIC ${CMAKE_CURRENT_BINARY_DIR})
#message("MBPOLL_VERSION=${MBPOLL_VERSION}")
#}}}}

include_directories(
    .
    src
    3rdparty
    3rdparty/modbus
    ${CMAKE_CURRENT_BINARY_DIR}

)


# Compiler options
add_definitions(-O2)
add_definitions(-Wall)
add_definitions(-Wno-unused-parameter)
add_definitions(-Wno-unused-function)
add_definitions(-Wno-unused-const-variable)
add_definitions(
    -DNDEBUG
)


# Linker options


if(WIN32)
    # Resource options
endif(WIN32)

# Library path
set(CMAKE_LDFLAGS "${CMAKE_LDFLAGS} -L. ")

# Define the C sources
set ( C_SRCS
    ${CMAKE_SOURCE_DIR}/3rdparty/sysio/serial.c
    ${CMAKE_SOURCE_DIR}/3rdparty/sysio/delay.c
    ${CMAKE_SOURCE_DIR}/3rdparty/modbus/modbus-tcp.c
    ${CMAKE_SOURCE_DIR}/3rdparty/modbus/modbus-rtu.c
    ${CMAKE_SOURCE_DIR}/3rdparty/modbus/modbus-data.c
    ${CMAKE_SOURCE_DIR}/3rdparty/modbus/modbus.c
    ${CMAKE_SOURCE_DIR}/src/mbpoll.c
)

# Define the CXX sources
set ( CXX_SRCS
    ${CMAKE_SOURCE_DIR}/src/RtsPin.cpp
)

set_source_files_properties(
    ${CXX_SRCS} PROPERTIES COMPILE_FLAGS 
    " -O2 -Wall")

set_source_files_properties(
    ${C_SRCS} PROPERTIES COMPILE_FLAGS 
    " -O2 -Wall -Wno-unused-parameter -Wno-unused-function -Wno-unused-const-variable")

if(WIN32)
    enable_language(RC)
    set(CMAKE_RC_COMPILE_OBJECT
        "<CMAKE_RC_COMPILER> ${RC_OPTIONS} -O coff -i <SOURCE> -o <OBJECT>")
endif(WIN32)



#{{{{ User Code 2
# Place your code here
#}}}}

add_executable(mbpoll ${RC_SRCS} ${CXX_SRCS} ${C_SRCS})
target_link_libraries(mbpoll ${LINK_OPTIONS})



#{{{{ User Code 3
# Place your code here
install(TARGETS mbpoll RUNTIME DESTINATION bin
        PERMISSIONS ${PROGRAM_PERMISSIONS})

### Debian Package generation
set(CPACK_GENERATOR "DEB")
set(CPACK_PACKAGE_VERSION "${MBPOLL_PKG_VERSION}")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "epsilonrt")
include(CPack)
#}}}}

